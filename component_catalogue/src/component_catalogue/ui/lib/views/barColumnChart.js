// Generated by CoffeeScript 1.6.2
(function() {
  define(['backbone', 'highcharts-more'], function(Backbone, Highcharts) {
    return Backbone.View.extend({
      classname: '.application-view',
      tagName: 'div',
      elements: [],
      initialize: function() {
        this.model.listenTo(this.model, 'addSeries', this.addSeries.bind(this));
        this.model.listenTo(this.model, 'removeSeries', this.removeSeries.bind(this));
        return this.chart = null;
      },
      render: function(width) {
        var chartContainer,
          _this = this;

        chartContainer = $('<div class="chart" />').appendTo(this.$el);
        if (width) {
          chartContainer.width(width);
        }
        chartContainer.highcharts(this.highchartsConfig(), function(chart) {
          return _this.chart = chart;
        });
        return this;
      },
      addSeries: function(series) {
        this.chart.addSeries(series, true, false);
        return this.redrawElements();
      },
      removeSeries: function(series) {
        this.chart.get(series.id).remove();
        return this.redrawElements();
      },
      highchartsConfig: function() {
        return {
          chart: {
            animation: false,
            type: 'columnrange'
          },
          plotOptions: {},
          series: [],
          xAxis: {
            categories: ['Duration', 'Distance', 'Rotation']
          }
        };
      },
      redrawElements: function() {
        var element, plotLeft, plotTop, point, points, rect, series, shape, _i, _j, _len, _len1, _ref, _ref1, _results;

        _ref = this.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          element.destroy();
        }
        _ref1 = this.chart.series;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          series = _ref1[_j];
          points = series.points;
          plotLeft = this.chart.plotLeft;
          plotTop = this.chart.plotTop;
          _results.push((function() {
            var _k, _len2, _results1;

            _results1 = [];
            for (_k = 0, _len2 = points.length; _k < _len2; _k++) {
              point = points[_k];
              console.log(point);
              shape = point.shapeArgs;
              rect = this.chart.renderer.rect(shape.x + plotLeft, shape.y + plotTop + shape.height / 2, shape.width, 2);
              rect.attr({
                'stroke-width': 0,
                'fill': 'white'
              }).add().toFront();
              _results1.push(this.elements.push(rect));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    });
  });

}).call(this);
