// Generated by CoffeeScript 1.6.2
(function() {
  define(['backbone', 'templates/testDetailDev', 'views/testDetailDevChart'], function(Backbone, testDetailDevTmpl, TestDetailDevChart) {
    return Backbone.View.extend({
      tagName: 'div',
      className: 'testDetailDevView',
      events: {
        'change:testGroup': 'testGroupChanged'
      },
      initialize: function() {
        this.testGroup = null;
        this.deltaX = new TestDetailDevChart({
          label: 'x',
          unit: 'm'
        });
        this.deltaY = new TestDetailDevChart({
          label: 'y',
          unit: 'm'
        });
        return this.deltaPhi = new TestDetailDevChart({
          label: 'phi',
          unit: 'rad'
        });
      },
      useTestGroup: function(testGroup) {
        this.stopListening(this.testGroup);
        this.testGroup = testGroup;
        return this.listenTo(this.testGroup, 'change:selectedTest', this.selectedTestChanged);
      },
      selectedTestChanged: function(testGroup, value) {
        var deltas, phi, t, test, tests, x, y, _ref;

        tests = testGroup.get('tests');
        test = tests.at(value);
        if (test) {
          deltas = test.get('deltas');
          _ref = this.parseDeltas(deltas), t = _ref[0], x = _ref[1], y = _ref[2], phi = _ref[3];
          this.deltaX.renderDeltas(t, x);
          this.deltaY.renderDeltas(t, y);
          return this.deltaPhi.renderDeltas(t, phi);
        }
      },
      parseDeltas: function(deltas) {
        var k, phi, t, v, x, y;

        t = [];
        x = [];
        y = [];
        phi = [];
        for (k in deltas) {
          v = deltas[k];
          t.push(v[0]);
          x.push(v[1]);
          y.push(v[2]);
          phi.push(v[3]);
        }
        return [t, x, y, phi];
      },
      render: function() {
        this.$el.html(testDetailDevTmpl());
        this.$('.deltaX').html(this.deltaX.render().el);
        this.$('.deltaY').html(this.deltaY.render().el);
        this.$('.deltaPhi').html(this.deltaPhi.render().el);
        return this;
      },
      renderNavigationChart: function() {
        var $el;

        $el = this.$('.navigation');
        return $el.html(this.navigationChart.render().el);
      },
      renderRobotChart: function() {
        var $el;

        $el = this.$('.robot');
        return $el.html(this.robotChart.render().el);
      }
    });
  });

}).call(this);
